{
        // Place your systemverilog snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
        // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
        // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
        // used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
        // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
        // Placeholders with the same ids are connected.
        // Example:
        // "Print to console": {
        //         "prefix": "log",
        //         "body": [
        //                 "console.log('$1');",
        //                 "$2"
        //         ],
        //         "description": "Log output to console"
        // }
        "UVM Info": {
                "prefix": "p-info",
                "body": [
                        "`uvm_info(get_full_name(), \"${1:INFO_MESSAGE}\", UVM_LOW)",
                ],
                "description": "Insert an uvm_info macro"
        },

        "UVM Error": {  
                "prefix": "p-error",  
                "body": [  
                  "`uvm_error(get_full_name(), \"${1:ERROR_MESSAGE}\")"  
                ],  
                "description": "Insert an uvm_error macro"  
        },

        "UVM Fatal": {  
                "prefix": "p-fatal",  
                "body": [  
                  "`uvm_fatal(get_full_name(), \"${1:FATAL_MESSAGE}\")"  
                ],  
                "description": "get_full_name()"  
        },

        "UVM Warning": {
                "prefix": "p-warn",
                "body": [
                        "`uvm_warning(get_full_name(), \"${1}\")"
                ],
                "description": "Insert an uvm_warning macro"
        },
        "UVM build phase": {
                "prefix": "p-build_phase",
                "body": [
                  "virtual function void build_phase(uvm_phase phase);",
                  "  super.build_phase(phase);",
                  "  ${1://create component}",
                  "endfunction: build_phase"
                ],
                "description": "UVM build phase"
        },
        "UVM connect phase": {
                "prefix": "p-connect_phase",
                "body": [
                  "virtual function void connect_phase(uvm_phase phase);",
                  "  super.connect_phase(phase);",
                  "  ${1://connect component}",
                  "endfunction: connect_phase"
                ],
                "description": "UVM connect phase"
        },
        "UVM end of elab phase": {
                "prefix": "p-end_of_elab_phase",
                "body": [
                  "virtual function void end_of_elaboration_phase(uvm_phase phase);",
                  "  super.end_of_elaboration_phase(phase);",
                  "  ${1://end of elaboration}",
                  "endfunction: end_of_elaboration_phase"
                ],
                "description": "UVM end of elab phase"
        },
        "UVM start of simulation phase": {
                "prefix": "p-start_of_simulation_phase",
                "body": [
                  "virtual function void start_of_simulation_phase(uvm_phase phase);",
                  "  super.start_of_simulation_phase(phase);",
                  "  ${1://start of simulation}",
                  "endfunction: start_of_simulation_phase"
                ],
                "description": "UVM start of simulation phase"
        },
        "UVM run phase": {
                "prefix": "p-run_phase",
                "body": [
                  "virtual task run_phase(uvm_phase phase);",
                  "  super.run_phase(phase);",
                  "  ${1://run component}",
                  "endtask: run_phase"
                ],
                "description": "UVM run phase"
        },
        "UVM pre_reset_phase": {
                "prefix": "p-pre_reset_phase",
                "body": [
                  "virtual task pre_reset_phase(uvm_phase phase);",
                  "  super.pre_reset_phase(phase);",
                  "  ${1://pre_reset component}",
                  "endtask: pre_reset_phase"
                ],
                "description": "UVM pre_reset phase"
        },
        "UVM reset phase": {
                "prefix": "p-reset_phase",
                "body": [
                  "virtual task reset_phase(uvm_phase phase);",
                  "  super.reset_phase(phase);",
                  "  ${1://reset component}",
                  "endtask: reset_phase"
                ],
                "description": "UVM reset phase"
        },
        "UVM post_reset_phase": {
                "prefix": "p-post_reset_phase",
                "body": [
                  "virtual task post_reset_phase(uvm_phase phase);",
                  "  super.post_reset_phase(phase);",
                  "  ${1://post_reset component}",
                  "endtask: post_reset_phase"
                ],
                "description": "UVM post_reset phase"
        },
        "UVM pre_configure_phase": {
                "prefix": "p-pre_configure_phase",
                "body": [
                  "virtual task pre_configure_phase(uvm_phase phase);",
                  "  super.pre_configure_phase(phase);",
                  "  ${1://pre_configure component}",
                  "endtask: pre_configure_phase"
                ],
                "description": "UVM pre_configure phase"
        },
        "UVM configure phase": {
                "prefix": "p-configure_phase",
                "body": [
                  "virtual task configure_phase(uvm_phase phase);",
                  "  super.configure_phase(phase);",
                  "  ${1://configure component}",
                  "endtask: configure_phase"
                ],
                "description": "UVM configure phase"
        },
        "UVM post_configure_phase": {
                "prefix": "p-post_configure_phase",
                "body": [
                  "virtual task post_configure_phase(uvm_phase phase);",
                  "  super.post_configure_phase(phase);",
                  "  ${1://post_configure component}",
                  "endtask: post_configure_phase"
                ],
                "description": "UVM post_configure phase"
        },
        "UVM pre_main_phase": {
                "prefix": "p-pre_main_phase",
                "body": [
                  "virtual task pre_main_phase(uvm_phase phase);",
                  "  super.pre_main_phase(phase);",
                  "  ${1://pre_main component}",
                  "endtask: pre_main_phase"
                ],
                "description": "UVM pre_main phase"
        },
        "UVM main phase": {
                "prefix": "p-main_phase",
                "body": [
                  "virtual task main_phase(uvm_phase phase);",
                  "  super.main_phase(phase);",
                  "  ${1://main component}",
                  "endtask: main_phase"
                ],
                "description": "UVM main phase"
        },
        "UVM post_main_phase": {
                "prefix": "p-post_main_phase",
                "body": [
                  "virtual task post_main_phase(uvm_phase phase);",
                  "  super.post_main_phase(phase);",
                  "  ${1://post_main component}",
                  "endtask: post_main_phase"
                ],
                "description": "UVM post_main phase"
        },
        "UVM pre_shutdown_phase": {
                "prefix": "p-pre_shutdown_phase",
                "body": [
                  "virtual task pre_shutdown_phase(uvm_phase phase);",
                  "  super.pre_shutdown_phase(phase);",
                  "  ${1://pre_shutdown component}",
                  "endtask: pre_shutdown_phase"
                ],
                "description": "UVM pre_shutdown phase"
        },
        "UVM shutdown_phase": {
                "prefix": "p-shutdown_phase",
                "body": [
                  "virtual task shutdown_phase(uvm_phase phase);",
                  "  super.shutdown_phase(phase);",
                  "  ${1://shutdown component}",
                  "endtask: shutdown_phase"
                ],
                "description": "UVM shutdown phase"
        },
        "UVM post_shutdown_phase": {
                "prefix": "p-post_shutdown_phase",
                "body": [
                  "virtual task post_shutdown_phase(uvm_phase phase);",
                  "  super.post_shutdown_phase(phase);",
                  "  ${1://post_shutdown component}",
                  "endtask: post_shutdown_phase"
                ],
                "description": "UVM post_shutdown phase"
        },
        "UVM extract_phase": {
                "prefix": "p-extract_phase",
                "body": [
                  "virtual function void extract_phase(uvm_phase phase);",
                  "  super.extract_phase(phase);",
                  "  ${1://extract component}",
                  "endfunction: extract_phase"
                ],
                "description": "UVM extract phase"
        },
        "UVM check_phase": {
                "prefix": "p-check_phase",
                "body": [
                  "virtual function void check_phase(uvm_phase phase);",
                  "  super.check_phase(phase);",
                  "  ${1://check component}",
                  "endfunction: check_phase"
                ],
                "description": "UVM check phase"
        },
        "UVM report_phase": {
                "prefix": "p-report_phase",
                "body": [
                  "virtual function void report_phase(uvm_phase phase);",
                  "  super.report_phase(phase);",
                  "  ${1://report component}",
                  "endfunction: report_phase"
                ],
                "description": "UVM report phase"
        },
        "UVM final_phase": {
                "prefix": "p-final_phase",
                "body": [
                  "virtual function void final_phase(uvm_phase phase);",
                  "  super.final_phase(phase);",
                  "  ${1://final component}",
                  "endfunction: final_phase"
                ],
                "description": "UVM final phase"
        },
        "UVM object new": {
                "prefix": "p-objnew",
                "body": [
                  "    function new (string name=\"\");",
                  "      super.new(name);",
                  "    endfunction : new"
                ],
                "description": "UVM object new"
        },
        "UVM object and component create": {
                "prefix": "p-create",
                "body": [
                  "${1} = ${2}::type_id::create(\"${1}\"${3| ,\\, this|});"
                ],
                "description": "UVM object and component create"
        },
    "UVM object create": {                                                                                                 
        "prefix": "p-objcreate",                                                                                       
        "body": [                                                                                                      
          "${1} = ${2}::type_id::create(\"${1}\");"                                                                    
        ],                                                                                                             
        "description": "UVM object create"                                                                             
    },                                                                                                                     
        "UVM component create": {
                "prefix": "p-copcreate",
                "body": [
                  "${1} = ${2}::type_id::create(\"${1}\", this);"
                ],
                "description": "UVM component create"
        },
        "UVM objection": {
                "prefix": "p-objection",
                "body": [
                  "phase.raise_objection(this, get_type_name());",
                  "${1};",
                  "phase.drop_objection(this, get_type_name());"
                ],
                "description": "UVM objection"
        },
        "UVM create reg model": {
                "prefix": "p-create_regmodel",
                "body": [
                  "rm = ${1:}::type_id::create(\"rm\", this);",
                  "rm.configure(null, \"\");",
                  "rm.build();",
                  "rm.lock_model();",
                  "rm.reset();",
                  "reg_sqr_adapter = new(\"reg_sqr_adapter\");",
                  ""
                ],
                "description": "UVM create reg model"
        },
        "uvm_component_utils": {
                "prefix": "p-component_utils",
                "body": [
                        "`uvm_component_utils($TM_FILENAME_BASE)",
                        "\n",
                ],
                "description": "Insert a uvm_component_utils macro"
        },
        "UVM wait and get config": {
                "prefix": "p-wait_get_cfg",
                "body": [
                  "always begin",
                  "  uvm_config_db#(int)::wait_modified(null, \"*\", \"${1:mycfg}\");",
                  "  void'(uvm_config_db#(int)::get(null, \"\", \"${1}\", ${1}));",
                  "end"
                ],
                "description": "UVM wait modified then get config"
        },
        "UVM object new": {
                "prefix": "p-objnew",
                "body": [
                  "function new (string name=\"\");",
                  "  super.new(name);",
                  "endfunction : new"
                ],
                "description": "UVM object new"
        },
        "UVM downcast": {
                "prefix": "p-downcast",
                "body": [
                  "begin",
                  "  if (!\\$cast(${1:EXT_}, ${2:BASE_})) begin",
                  "    `uvm_error(get_type_name(), $sformatf(\"Cast failed: base class variable %0s does not hold extended class %0s handle\", ",
                  "        ${2:BASE_}, ${1:EXT_}))",
                  "  end",
                  "end"
                ],
                "description": "UVM downcast"
        },
        "UVM import": {
                "prefix": "p-import",
                "body": [
                  "import uvm_pkg::*;",
                  "`include \"uvm_macros.svh\""
                ],
                "description": "UVM import"
        },
        "SV class function": {
                "prefix": "p-singleton",
                "body": [
                  "  static local $TM_FILENAME_BASE m_inst;",
                  "",
                  "  // Group -- NODOCS -- Singleton ",
                  "",
                  "  // Function -- NODOCS -- get_inst",
                  "  //",
                  "  // Returns the singleton instance of the $TM_FILENAME_BASE.",
                  "",
                  "  static function $TM_FILENAME_BASE get_inst();",
                  "    if(m_inst == null) ",
                  "      m_inst = new(\"$TM_FILENAME_BASE\");",
                  "    return m_inst;",
                  "  endfunction: $TM_FILENAME_BASE"
                ],
                "description": "SV class function"
        },
        "SV macro": {
                "prefix": "p-headmacro",
                "body": [
                  "`ifndef ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}__SV",
                  "`define ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}__SV",
                  "${1}",
                  "// ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}__SV"
                ],
                "description": "SV macro for compilation"
        },
        "UVM class": {
                "prefix": "p-class",
                "body": [
                  "`ifndef ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}__SV",
                  "`define ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}__SV",
                  "class $TM_FILENAME_BASE extends uvm_${TM_FILENAME_BASE/[^_]+_//g};",
                  "    ${2://declear vars}",
                  "    `uvm_${3|component,object|}_utils($TM_FILENAME_BASE)",
                  "    // `uvm_new_func",
                  "    function new (string name);",
                  "      super.new(name);",
                  "    endfunction : new",
                  "",
                  "endclass: $TM_FILENAME_BASE",
                  "`endif // ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}__SV",
                  ""
                ],
                "description": "UVM class"
        },
        "UVM objection in seq": {
                "prefix": "p-seqobjection",
                "body": [
                  "`define UVM_POST_VERSION_1_1",
                  "var uvm_phase starting_phase = get_starting_phase();",
                  "`endif",
                  "if(starting_phase != null) starting_phase.raise_objection(this, {get_type_name(), \"not finished\"});",
                  "$1",
                  "if(starting_phase != null) starting_phase.drop_objection(this, {get_type_name(), \"seq finished\"});",
                  ""
                ],
                "description": "UVM objection in seq"
        },
        "UVM base vseq": {
                "prefix": "p-vseq",
                "body": [
                  "`ifndef ${1/(.*)/${1:/upcase}/}_VSEQ__SV",
                  "`define ${1/(.*)/${1:/upcase}/}_VSEQ__SV",
                  "class ${1:mybase}_vseq extends uvm_seq;",
                  "",
                  "    `uvm_object_utils(${1:mybase}_vseq)",
                  "    `uvm_declare_p_sequencer(${2:mybase_vsqr})",
                  "    function new (string name);",
                  "      super.new(name);",
                  "    endfunction : new",
                  "",
                  "    virtual task pre_body();",
                  "        `define UVM_POST_VERSION_1_1",
                  "        var uvm_phase starting_phase = get_starting_phase();",
                  "        `endif",
                  "        if(starting_phase != null) starting_phase.raise_objection(this, {get_type_name(), \"not finished\"});",
                  "    endtask: pre_body",
                  "",
                  "    virtual task post_body();",
                  "        if(starting_phase != null) starting_phase.drop_objection(this, {get_type_name(), \"seq finished\"});",
                  "    endtask: post_body",
                  "",
                  "endclass: ${1:mybase}_vseq",
                  "`endif // ${1/(.*)/${1:/upcase}/}_VSEQ__SV",
                  ""
                ],
                "description": "UVM base vseq"
        },
        "term color": {
                "prefix": "color",
                "body": [
                  "class Color;",
                  "    // Foreground",
                  "    static string FORE_BLACK           = \"30\";  ",
                  "    static string FORE_RED             = \"31\";  ",
                  "    static string FORE_GREEN           = \"32\";  ",
                  "    static string FORE_YELLOW          = \"33\";  ",
                  "    static string FORE_BLUE            = \"34\";  ",
                  "    static string FORE_MAGENTA         = \"35\";  ",
                  "    static string FORE_CYAN            = \"36\";  ",
                  "    static string FORE_WHITE           = \"37\";  ",
                  "    static string FORE_RESET           = \"39\";  ",
                  "    // These are fairly well supported, but not part of the standard_  ",
                  "    static string FORE_LIGHTBLACK_EX   = \"90\";  ",
                  "    static string FORE_LIGHTRED_EX     = \"91\";  ",
                  "    static string FORE_LIGHTGREEN_EX   = \"92\";  ",
                  "    static string FORE_LIGHTYELLOW_EX  = \"93\";  ",
                  "    static string FORE_LIGHTBLUE_EX    = \"94\";  ",
                  "    static string FORE_LIGHTMAGENTA_EX = \"95\";  ",
                  "    static string FORE_LIGHTCYAN_EX    = \"96\";  ",
                  "    static string FORE_LIGHTWHITE_EX   = \"97\"; ",
                  "",
                  "    // Background ",
                  "    static string BACK_BLACK           = \"40\";  ",
                  "    static string BACK_RED             = \"41\";  ",
                  "    static string BACK_GREEN           = \"42\";  ",
                  "    static string BACK_YELLOW          = \"43\";  ",
                  "    static string BACK_BLUE            = \"44\";  ",
                  "    static string BACK_MAGENTA         = \"45\";  ",
                  "    static string BACK_CYAN            = \"46\";  ",
                  "    static string BACK_WHITE           = \"47\";  ",
                  "    static string BACK_RESET           = \"49\";  ",
                  "    // These are fairly well supported, but not part of the standard_ansi ",
                  "    static string BACK_LIGHTBLACK_EX   = \"100\";  ",
                  "    static string BACK_LIGHTRED_EX     = \"101\";  ",
                  "    static string BACK_LIGHTGREEN_EX   = \"102\";  ",
                  "    static string BACK_LIGHTYELLOW_EX  = \"103\";  ",
                  "    static string BACK_LIGHTBLUE_EX    = \"104\";  ",
                  "    static string BACK_LIGHTMAGENTA_EX = \"105\";  ",
                  "    static string BACK_LIGHTCYAN_EX    = \"106\";  ",
                  "    static string BACK_LIGHTWHITE_EX   = \"107S\"; ",
                  "",
                  "    // Style",
                  "    static string STYLE_BRIGHT    = \"1\";",
                  "    static string STYLE_DIM       = \"2\";",
                  "    static string STYLE_NORMAL    = \"22\";",
                  "    static string STYLE_RESET_ALL = \"0\";",
                  "",
                  "    static function string render(string str, string fore=\"39\", string back=\"49\", string style=\"22\");",
                  "        return {\"\\033[\",fore, \"m\", \"\\033[\", back, \"m\", \"\\033[\", style, \"m\", str, \"\\033[0m\"};",
                  "    endfunction",
                  "",
                  "endclass",
                  "",
                  "/* example usage:",
                  "module test_color;",
                  "    initial begin",
                  "        $display(Color::render(\"Hello World!\", Color::FORE_GREEN, Color::BACK_YELLOW, Color::STYLE_BRIGHT));",
                  "        $finish;",
                  "    end",
                  "endmodule",
                  "*/",
                  ""
                ],
                "description": "term color"
          }
}